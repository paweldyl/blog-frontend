// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "comment/service_comment.proto" (package "pb", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CommentService } from "./service_comment";
import type { Empty } from "../google/protobuf/empty";
import type { DeleteCommentRequest } from "./rpc_delete_comment";
import type { UpdateCommentResponse } from "./rpc_update_comment";
import type { UpdateCommentRequest } from "./rpc_update_comment";
import type { GetPostCommentsResponse } from "./rpc_get_post_comments";
import type { GetPostCommentsRequest } from "./rpc_get_post_comments";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateCommentResponse } from "./rpc_create_comment";
import type { CreateCommentRequest } from "./rpc_create_comment";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service pb.CommentService
 */
export interface ICommentServiceClient {
    /**
     * @generated from protobuf rpc: CreateComment(pb.CreateCommentRequest) returns (pb.CreateCommentResponse);
     */
    createComment(input: CreateCommentRequest, options?: RpcOptions): UnaryCall<CreateCommentRequest, CreateCommentResponse>;
    /**
     * @generated from protobuf rpc: GetPostComments(pb.GetPostCommentsRequest) returns (pb.GetPostCommentsResponse);
     */
    getPostComments(input: GetPostCommentsRequest, options?: RpcOptions): UnaryCall<GetPostCommentsRequest, GetPostCommentsResponse>;
    /**
     * @generated from protobuf rpc: UpdateComment(pb.UpdateCommentRequest) returns (pb.UpdateCommentResponse);
     */
    updateComment(input: UpdateCommentRequest, options?: RpcOptions): UnaryCall<UpdateCommentRequest, UpdateCommentResponse>;
    /**
     * @generated from protobuf rpc: DeleteComment(pb.DeleteCommentRequest) returns (google.protobuf.Empty);
     */
    deleteComment(input: DeleteCommentRequest, options?: RpcOptions): UnaryCall<DeleteCommentRequest, Empty>;
}
/**
 * @generated from protobuf service pb.CommentService
 */
export class CommentServiceClient implements ICommentServiceClient, ServiceInfo {
    typeName = CommentService.typeName;
    methods = CommentService.methods;
    options = CommentService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateComment(pb.CreateCommentRequest) returns (pb.CreateCommentResponse);
     */
    createComment(input: CreateCommentRequest, options?: RpcOptions): UnaryCall<CreateCommentRequest, CreateCommentResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateCommentRequest, CreateCommentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetPostComments(pb.GetPostCommentsRequest) returns (pb.GetPostCommentsResponse);
     */
    getPostComments(input: GetPostCommentsRequest, options?: RpcOptions): UnaryCall<GetPostCommentsRequest, GetPostCommentsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPostCommentsRequest, GetPostCommentsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateComment(pb.UpdateCommentRequest) returns (pb.UpdateCommentResponse);
     */
    updateComment(input: UpdateCommentRequest, options?: RpcOptions): UnaryCall<UpdateCommentRequest, UpdateCommentResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateCommentRequest, UpdateCommentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteComment(pb.DeleteCommentRequest) returns (google.protobuf.Empty);
     */
    deleteComment(input: DeleteCommentRequest, options?: RpcOptions): UnaryCall<DeleteCommentRequest, Empty> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteCommentRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
