// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "comment/rpc_update_comment.proto" (package "pb", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Comment } from "./comment";
/**
 * @generated from protobuf message pb.UpdateCommentRequest
 */
export interface UpdateCommentRequest {
    /**
     * @generated from protobuf field: string comment_id = 1;
     */
    commentId: string;
    /**
     * @generated from protobuf field: string text = 2;
     */
    text: string;
}
/**
 * @generated from protobuf message pb.UpdateCommentResponse
 */
export interface UpdateCommentResponse {
    /**
     * @generated from protobuf field: pb.Comment comment = 1;
     */
    comment?: Comment;
}
// @generated message type with reflection information, may provide speed optimized methods
class UpdateCommentRequest$Type extends MessageType<UpdateCommentRequest> {
    constructor() {
        super("pb.UpdateCommentRequest", [
            { no: 1, name: "comment_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateCommentRequest>): UpdateCommentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.commentId = "";
        message.text = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateCommentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateCommentRequest): UpdateCommentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string comment_id */ 1:
                    message.commentId = reader.string();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateCommentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string comment_id = 1; */
        if (message.commentId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.commentId);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.UpdateCommentRequest
 */
export const UpdateCommentRequest = new UpdateCommentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateCommentResponse$Type extends MessageType<UpdateCommentResponse> {
    constructor() {
        super("pb.UpdateCommentResponse", [
            { no: 1, name: "comment", kind: "message", T: () => Comment }
        ]);
    }
    create(value?: PartialMessage<UpdateCommentResponse>): UpdateCommentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateCommentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateCommentResponse): UpdateCommentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pb.Comment comment */ 1:
                    message.comment = Comment.internalBinaryRead(reader, reader.uint32(), options, message.comment);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateCommentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pb.Comment comment = 1; */
        if (message.comment)
            Comment.internalBinaryWrite(message.comment, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.UpdateCommentResponse
 */
export const UpdateCommentResponse = new UpdateCommentResponse$Type();
