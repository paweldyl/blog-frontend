// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "post_like/post_like.proto" (package "pb", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message pb.PostLike
 */
export interface PostLike {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string post_id = 2;
     */
    postId: string;
    /**
     * @generated from protobuf field: pb.LikeValue value = 3;
     */
    value: LikeValue;
}
/**
 * @generated from protobuf enum pb.LikeValue
 */
export enum LikeValue {
    /**
     * @generated from protobuf enum value: LIKE_VALUE_UNSPECIFIED = 0;
     */
    LIKE_VALUE_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: LIKE = 1;
     */
    LIKE = 1,
    /**
     * @generated from protobuf enum value: DISLIKE = 2;
     */
    DISLIKE = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class PostLike$Type extends MessageType<PostLike> {
    constructor() {
        super("pb.PostLike", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "post_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "enum", T: () => ["pb.LikeValue", LikeValue] }
        ]);
    }
    create(value?: PartialMessage<PostLike>): PostLike {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.postId = "";
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial<PostLike>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PostLike): PostLike {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string post_id */ 2:
                    message.postId = reader.string();
                    break;
                case /* pb.LikeValue value */ 3:
                    message.value = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PostLike, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string post_id = 2; */
        if (message.postId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.postId);
        /* pb.LikeValue value = 3; */
        if (message.value !== 0)
            writer.tag(3, WireType.Varint).int32(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.PostLike
 */
export const PostLike = new PostLike$Type();
