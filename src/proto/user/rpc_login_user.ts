// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "user/rpc_login_user.proto" (package "pb", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
import { User } from "./user";
/**
 * @generated from protobuf message pb.LoginUserRequest
 */
export interface LoginUserRequest {
    /**
     * @generated from protobuf field: string login = 1;
     */
    login: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message pb.LoginUserResponse
 */
export interface LoginUserResponse {
    /**
     * @generated from protobuf field: pb.User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: string session_id = 2;
     */
    sessionId: string;
    /**
     * @generated from protobuf field: string access_token = 3;
     */
    accessToken: string;
    /**
     * @generated from protobuf field: string refresh_token = 4;
     */
    refreshToken: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp access_token_expires_at = 5;
     */
    accessTokenExpiresAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp refresh_token_expires_at = 6;
     */
    refreshTokenExpiresAt?: Timestamp;
}
// @generated message type with reflection information, may provide speed optimized methods
class LoginUserRequest$Type extends MessageType<LoginUserRequest> {
    constructor() {
        super("pb.LoginUserRequest", [
            { no: 1, name: "login", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoginUserRequest>): LoginUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.login = "";
        message.password = "";
        if (value !== undefined)
            reflectionMergePartial<LoginUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginUserRequest): LoginUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string login */ 1:
                    message.login = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string login = 1; */
        if (message.login !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.login);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.LoginUserRequest
 */
export const LoginUserRequest = new LoginUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginUserResponse$Type extends MessageType<LoginUserResponse> {
    constructor() {
        super("pb.LoginUserResponse", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "access_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "access_token_expires_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "refresh_token_expires_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<LoginUserResponse>): LoginUserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = "";
        message.accessToken = "";
        message.refreshToken = "";
        if (value !== undefined)
            reflectionMergePartial<LoginUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginUserResponse): LoginUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pb.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string session_id */ 2:
                    message.sessionId = reader.string();
                    break;
                case /* string access_token */ 3:
                    message.accessToken = reader.string();
                    break;
                case /* string refresh_token */ 4:
                    message.refreshToken = reader.string();
                    break;
                case /* google.protobuf.Timestamp access_token_expires_at */ 5:
                    message.accessTokenExpiresAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.accessTokenExpiresAt);
                    break;
                case /* google.protobuf.Timestamp refresh_token_expires_at */ 6:
                    message.refreshTokenExpiresAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.refreshTokenExpiresAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pb.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string session_id = 2; */
        if (message.sessionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sessionId);
        /* string access_token = 3; */
        if (message.accessToken !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.accessToken);
        /* string refresh_token = 4; */
        if (message.refreshToken !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.refreshToken);
        /* google.protobuf.Timestamp access_token_expires_at = 5; */
        if (message.accessTokenExpiresAt)
            Timestamp.internalBinaryWrite(message.accessTokenExpiresAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp refresh_token_expires_at = 6; */
        if (message.refreshTokenExpiresAt)
            Timestamp.internalBinaryWrite(message.refreshTokenExpiresAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.LoginUserResponse
 */
export const LoginUserResponse = new LoginUserResponse$Type();
